<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - Sidedish Foods</title>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Montserrat:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
    <style>
        .checkout-section {
            max-width: 800px;
            margin: 0 auto;
        }
        .order-summary h3, .delivery-details h3, .payment-method h3 {
            font-family: 'Playfair Display', serif;
            color: #4a2c2a;
        }
        .payment-method div {
            margin-left: 20px;
        }
        .place-order-btn {
            padding: 15px;
            font-size: 18px;
        }
        .error-message {
            color: red;
            font-size: 14px;
            margin-top: 5px;
            display: none;
        }
        @media (max-width: 600px) {
            .checkout-section {
                padding: 20px;
            }
            .delivery-details input,
            .delivery-details select {
                width: 100%;
                box-sizing: border-box;
            }
            .place-order-btn {
                width: 100%;
                font-size: 16px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <img src="assets/logo.jpg" alt="Sidedish Foods Logo">
        <nav>
            <a href="index.htm">Home</a>
            <a href="menu.htm">Menu</a>
            <a href="about.htm">About</a>
            <a href="contact.htm">Contact</a>
            <a href="order-list.htm">The Order List</a>
            <a href="admin-dashboard.htm">Admin Dashboard</a>
        </nav>
    </div>
    <div class="section checkout-section">
        <h2>Checkout</h2>
        <div class="card order-summary">
            <h3>Order Summary</h3>
            <div id="order-items"></div>
            <p>Food Total: <span id="order-total">0</span> NGN</p>
            <p>Delivery Fee: <span id="delivery-fee">Select delivery location</span></p>
            <p class="error-message" id="cart-error" role="alert">Your cart is empty. Please add items to your cart.</p>
        </div>
        <div class="card delivery-details">
            <h3>Delivery Details</h3>
            <label for="address">Delivery Address:</label>
            <input type="text" id="address" placeholder="Enter your address" required aria-label="Delivery address">
            <p class="error-message" id="address-error" role="alert">Please enter a valid address.</p>
            <label for="city">State:</label>
            <select id="city" onchange="updateDeliveryFee()" required aria-label="Select state">
                <option value="">Select State</option>
                <option value="Kano">Kano</option>
                <option value="Abia">Abia</option>
                <option value="Adamawa">Adamawa</option>
                <option value="Akwa Ibom">Akwa Ibom</option>
                <option value="Anambra">Anambra</option>
                <option value="Bauchi">Bauchi</option>
                <option value="Bayelsa">Bayelsa</option>
                <option value="Benue">Benue</option>
                <option value="Borno">Borno</option>
                <option value="Cross River">Cross River</option>
                <option value="Delta">Delta</option>
                <option value="Ebonyi">Ebonyi</option>
                <option value="Edo">Edo</option>
                <option value="Ekiti">Ekiti</option>
                <option value="Enugu">Enugu</option>
                <option value="Gombe">Gombe</option>
                <option value="Imo">Imo</option>
                <option value="Jigawa">Jigawa</option>
                <option value="Kaduna">Kaduna</option>
                <option value="Katsina">Katsina</option>
                <option value="Kebbi">Kebbi</option>
                <option value="Kogi">Kogi</option>
                <option value="Kwara">Kwara</option>
                <option value="Lagos">Lagos</option>
                <option value="Nasarawa">Nasarawa</option>
                <option value="Niger">Niger</option>
                <option value="Ogun">Ogun</option>
                <option value="Ondo">Ondo</option>
                <option value="Osun">Osun</option>
                <option value="Oyo">Oyo</option>
                <option value="Plateau">Plateau</option>
                <option value="Rivers">Rivers</option>
                <option value="Sokoto">Sokoto</option>
                <option value="Taraba">Taraba</option>
                <option value="Yobe">Yobe</option>
                <option value="Zamfara">Zamfara</option>
                <option value="FCT">FCT (Abuja)</option>
            </select>
            <p class="error-message" id="city-error" role="alert">Please select a state.</p>
            <p style="font-size: 12px; color: #666;">*Orders under 10,000 NGN are only available for delivery in Kano.</p>
            <label>Delivery Option:</label>
            <input type="radio" name="delivery-option" id="delivery-option-delivery" value="delivery" checked onchange="updateDeliveryFee()" aria-label="Delivery option">
            <label for="delivery-option-delivery">Delivery</label>
            <input type="radio" name="delivery-option" id="delivery-option-pickup" value="pickup" onchange="updateDeliveryFee()" aria-label="In-restaurant pickup option">
            <label for="delivery-option-pickup">In-Restaurant Pickup</label>
        </div>
        <div class="card payment-method">
            <h3>Payment Method</h3>
            <div id="payment-options">
                <input type="radio" name="payment" value="bank-transfer" onclick="showPaymentDetails('bank-transfer')" aria-label="Bank Transfer payment"> Bank Transfer<br>
                <div id="bank-transfer-details" style="display: none;">
                    <p>Account Name: Aisha Ahmad Abdullahi</p>
                    <p>Account Number: 7019631217</p>
                    <p>Bank: Opay</p>
                </div>
                <input type="radio" name="payment" value="cash-on-delivery" onclick="showPaymentDetails('cash-on-delivery')" aria-label="Cash on Delivery payment"> Cash on Delivery (Kano only)<br>
                <input type="radio" name="payment" value="card-payment" onclick="showPaymentDetails('card-payment')" aria-label="Card Payment"> Card Payment (In-restaurant pickup only)
                <input type="radio" name="payment" id="cash-on-delivery" value="cash-on-delivery" onclick="showPaymentDetails('cash-on-delivery')" aria-label="Cash on Delivery payment"> Cash on Delivery (Kano only)<br>
                <input type="radio" name="payment" id="card-payment" value="card-payment" onclick="showPaymentDetails('card-payment')" aria-label="Card Payment"> Card Payment (In-restaurant pickup only)
            </div>
            <p class="error-message" id="payment-error" role="alert">Please select a payment method.</p>
        </div>
        <button class="btn place-order-btn" onclick="submitOrder()" aria-label="Place order">Place Order</button>
    </div>
    <div class="footer">
        <p>Address: 479 Shehu Kazaura Rd, Hotoro, Kano</p>
        <p>Contact: 07019631217, 08054915919</p>
        <p>Instagram: <a href="https://instagram.com/sidedish_foods" target="_blank">@sidedish_foods</a></p>
    </div>
    <script src="script.js"></script>
    <script>
        // Inline JavaScript code that depends on BASE_URL
        window.addEventListener('load', function() {
            try {
                updateCheckoutSummary();
                updateDeliveryFee();
            } catch (error) {
                console.error('Error during window.onload:', error);
            }
        });

        const allowedOrigins = ['https://sidedishfoodsweb.vercel.app'];
        app.use(cors({
            origin: allowedOrigins
        }));

        let deliveryFee = 0;

        window.addEventListener('load', function() {
            try {
                updateCheckoutSummary();
                updateDeliveryFee();
            } catch (error) {
                console.error('Error during window.onload:', error);
            }
        });

        function updateCheckoutSummary() {
            console.log('Updating checkout summary...');
            const orderItemsContainer = document.getElementById('order-items');
            const orderTotalElement = document.getElementById('order-total');

            if (!cart.length) {
                orderItemsContainer.innerHTML = '<p>Your cart is empty.</p>';
                orderTotalElement.textContent = '0';
                return;
            }

            let html = '';
            cart.forEach(item => {
                html += `<p>${item.name} - ${item.price.toLocaleString('en-NG')} NGN</p>`;
            });

            orderItemsContainer.innerHTML = html;
            orderTotalElement.textContent = total.toLocaleString('en-NG');
        }

        window.submitOrder = async function () {
            console.log('Place Order button clicked');
            try {
                // Reset error messages
                document.getElementById('cart-error').style.display = 'none';
                document.getElementById('address-error').style.display = 'none';
                document.getElementById('city-error').style.display = 'none';
                document.getElementById('payment-error').style.display = 'none';

                // Get form values
                const city = document.getElementById('city').value;
                const address = document.getElementById('address').value.trim();
                const deliveryOption = document.querySelector('input[name="delivery-option"]:checked').value;
                const paymentMethod = document.querySelector('input[name="payment"]:checked')?.value;

                // Validation checks
                let hasError = false;

                if (cart.length === 0) {
                    document.getElementById('cart-error').style.display = 'block';
                    hasError = true;
                }

                if (!address) {
                    document.getElementById('address-error').style.display = 'block';
                    hasError = true;
                }

                if (!city) {
                    document.getElementById('city-error').style.display = 'block';
                    hasError = true;
                }

                if (!paymentMethod) {
                    document.getElementById('payment-error').style.display = 'block';
                    hasError = true;
                }

                if (total < 10000 && city !== 'Kano' && deliveryOption !== 'pickup') {
                    alert('Orders under 10,000 NGN are only available for delivery in Kano.');
                    hasError = true;
                }

                if (deliveryOption === 'pickup' && paymentMethod !== 'card-payment' && paymentMethod !== 'bank-transfer') {
                    alert('For in-restaurant pickup, please select Card Payment or Bank Transfer.');
                    hasError = true;
                }

                if (city === 'Kano' && deliveryOption !== 'pickup' && paymentMethod !== 'cash-on-delivery' && paymentMethod !== 'bank-transfer') {
                    alert('For Kano deliveries, please select Cash on Delivery or Bank Transfer.');
                    hasError = true;
                }

                if (city !== 'Kano' && deliveryOption !== 'pickup' && paymentMethod !== 'bank-transfer') {
                    alert('For deliveries outside Kano, please select Bank Transfer.');
                    hasError = true;
                }

                if (hasError) return;

                // Calculate total including delivery fee
                let finalTotal = total;
                if (deliveryOption !== 'pickup' && total >= 10000 && city !== 'Kano') {
                    // Delivery fee varies by state, not included in total
                } else if (deliveryOption !== 'pickup' && city === 'Kano') {
                    deliveryFee = 2400;
                    finalTotal += deliveryFee;
                }

                // Prepare order data
                const orderData = {
                    items: cart,
                    total: finalTotal,
                    address: address,
                    state: city,
                    delivery_option: deliveryOption,
                    payment_method: paymentMethod,
                    payment_confirmed: false,
                    delivery_fee: deliveryFee
                };

                console.log('Order Data:', orderData);

                const response = await fetch(`${BASE_URL}/api/orders`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(orderData)
                });

                if (response.ok) {
                    alert('Order placed successfully! You can view your order in the dashboard.');
                    // Clear localStorage first
                    localStorage.removeItem('cart');
                    localStorage.removeItem('total');
                    // Then reset global variables
                    cart = [];
                    total = 0;
                    deliveryFee = 0;
                    window.location.href = '/index.htm';
                } else {
                    const error = await response.json();
                    alert('Failed to place order: ' + (error.message || 'Unknown error. Please try again.'));
                }
            } catch (error) {
                console.error('Error in submitOrder:', error);
                alert('An error occurred while placing the order: ' + error.message + '. Please check your internet connection and try again.');
            }
        };

        async function submitOrder() {
            console.log('Placing order...');
            console.log('Cart:', cart);
            console.log('Total:', total);

            const orderData = {
                items: cart,
                total: total,
                address: document.getElementById('address').value.trim(),
                state: document.getElementById('city').value,
                delivery_option: document.querySelector('input[name="delivery-option"]:checked').value,
                payment_method: document.querySelector('input[name="payment"]:checked')?.value,
                payment_confirmed: false,
                delivery_fee: deliveryFee
            };

            console.log('Order Data:', orderData);

            try {
                const response = await fetch(`${BASE_URL}/api/orders`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(orderData)
                });

                console.log('Response Status:', response.status);
                if (response.ok) {
                    const responseData = await response.json();
                    console.log('Order placed successfully!', responseData);
                    alert('Order placed successfully! You can view your order in the dashboard.');
                    localStorage.removeItem('cart');
                    localStorage.removeItem('total');
                    cart = [];
                    total = 0;
                    deliveryFee = 0;
                    window.location.href = '/index.htm';
                } else {
                    const error = await response.json();
                    console.error('Error Response:', error);
                    alert('Failed to place order: ' + (error.message || 'Unknown error. Please try again.'));
                }
            } catch (error) {
                console.error('Network Error:', error.message);
                alert('An error occurred while placing the order: ' + error.message + '. Please check your internet connection and try again.');
            }
        }

        function updateDeliveryFee() {
            console.log('Updating delivery fee...');
            const city = document.getElementById('city').value;
            const deliveryOption = document.querySelector('input[name="delivery-option"]:checked').value;
            const deliveryFeeElement = document.getElementById('delivery-fee');
            const cashOnDeliveryOption = document.getElementById('cash-on-delivery');
            const cardPaymentOption = document.getElementById('card-payment');

            if (deliveryOption === 'pickup') {
                deliveryFeeElement.textContent = '0 NGN (In-restaurant pickup)';
                deliveryFee = 0;
                cashOnDeliveryOption.disabled = true;
                cardPaymentOption.disabled = false;
            } else {
                if (total < 10000) {
                    if (city === 'Kano') {
                        deliveryFeeElement.textContent = '2,400 NGN';
                        deliveryFee = 2400;
                        cashOnDeliveryOption.disabled = false;
                        cardPaymentOption.disabled = true;
                    } else {
                        deliveryFeeElement.textContent = 'Not available (Order under 10,000 NGN)';
                        deliveryFee = 0;
                        cashOnDeliveryOption.disabled = true;
                        cardPaymentOption.disabled = true;
                    }
                } else {
                    if (city === 'Kano') {
                        deliveryFeeElement.textContent = '2,400 NGN';
                        deliveryFee = 2400;
                        cashOnDeliveryOption.disabled = false;
                        cardPaymentOption.disabled = true;
                    } else {
                        deliveryFeeElement.textContent = 'To be paid upon arrival (varies by state)';
                        deliveryFee = 0;
                        cashOnDeliveryOption.disabled = true;
                        cardPaymentOption.disabled = true;
                    }
                }
            }
        }

        function showPaymentDetails(method) {
            console.log('showPaymentDetails called with method:', method);
            const bankTransferDetails = document.getElementById('bank-transfer-details');
            if (bankTransferDetails) {
                bankTransferDetails.style.display = method === 'bank-transfer' ? 'block' : 'none';
            } else {
                console.error('bank-transfer-details element not found');
            }
        }

        fetch(`${BASE_URL}/api/orders`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                items: [{ name: 'Test Item', price: 1000 }],
                total: 1000,
                address: 'Test Address',
                state: 'Kano',
                delivery_option: 'delivery',
                payment_method: 'cash-on-delivery',
                payment_confirmed: false,
                delivery_fee: 2400
            })
        })
            .then(response => response.json())
            .then(data => console.log('Success:', data))
            .catch(error => console.error('Error:', error));
    </script>
</body>
</html>